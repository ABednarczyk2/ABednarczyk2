using QuantEcon  # For Tauchen’s method

# Parameters
ρ = 0.9                # Persistence parameter
σ = 0.4                # Standard deviation of shocks
prod_grid_size = 5     # Number of points in the grid WHY 5 APPARENTLY IT'S THE CONVENTION follow up

# Discretize AR(1) process with Tauchen’s method
discretized_y = tauchen(prod_grid_size, ρ, σ)

# Adjust productivity grid so that E[z] = 1 I guess with grid size 5 we HAVE to get 0.5
prod_grid = exp.(discretized_y.state_values .- 0.5 * σ^2 / (1 - ρ^2))

# Display the results
println("Productivity Grid: ", prod_grid)
println("Transition Matrix: ", discretized_y.p)


#THIS IS TO SEE HOW DIFFERENT GRIDS AFFACT THE Accuracy (more points capture more variation in productivity) AND Computational efficiency (fewer points make calculations faster and less memory-intensive)
using Pkg
Pkg.add("StatFiles")
Pkg.add("DataFrames")
Pkg.add("CSVFiles")  # Sometimes useful for conversions
using StatFiles, DataFrames
using QuantEcon, Plots

ρ = 0.9
σ = 0.4

function get_prod_grid(n)
    mc = tauchen(n, ρ, σ)
    prod_grid = exp.(mc.state_values .- 0.5 * (σ^2) / (1 - ρ^2))
    return prod_grid, mc.p
end

grid_sizes = [3, 5, 7, 9]
plot(title="Productivity Grids with Different Number of Points", xlabel="Grid Index", ylabel="Productivity Level")

for size in grid_sizes
    prod_grid, _ = get_prod_grid(size)
    plot!(1:length(prod_grid), prod_grid, label="Grid Size $size", marker=:circle)
end

display(plot!())











2. Observe that the share of income that goes to labor is wL
AKαL
1−α
.
This implies that this share is equal to 1 − α. Therefore we can set
the value of α using information on the labor share. Find information on the labor share in the U.S. economy and use this to set
the value of α. You will need to provide information on where you
found this data in your writeup. You can use Penn World Tables,
for example.

2. for USA in year 2019 the share of iabor income in GDP is 0.6291631. Data was found in Penn World Tables (Labor Detail variable lab_sh1 all mixed income). So alpha s roughly 0.37 

3.
using NLsolve  # Nonlinear solver for parameter calibration

# Given constants
α = 0.37
r = 0.04
inv_output_ratio = 0.2
G_output_ratio = 0.2
w = 1
L = 1

# System of equations to solve for A, δ, β, τ
function equations!(F, x)
    A, δ, β, τ = x

    # 1. From marginal product of labor condition
    Y = 1 / (1 - α)  # Output per labor is fixed at w = 1
    K = (w / ((1 - α) * A))^(1/α)  # Capital from MPL condition
    
    # 2. Marginal product of capital condition
    F[1] = r - (α * A * K^(α - 1) * L^(1 - α) - δ)
    
    # 3. Investment-output ratio
    F[2] = (δ * K / Y) - inv_output_ratio
    
    # 4. Government spending-output ratio
    F[3] = (τ * w * L / Y) - G_output_ratio
    
    # 5. Euler equation linking β and r
    F[4] = (1 / β) - (1 + r)
end

# Initial guesses for A, δ, β, τ
initial_guess = [1.0, 0.05, 0.96, 0.2]

# Solve the system
sol = nlsolve(equations!, initial_guess)

# Display results
A, δ, β, τ = sol.zero
println("Calibrated Parameters:")
println("A = ", A)
println("δ = ", δ)
println("β = ", β)
println("τ = ", τ)






# how to check for robustness 
If increasing the grid size only changes outcomes slightly, then the solution is robust with respect to grid resolution. ALLEGEDLY 

using Plots

#  tax function defined
#   T(yi) = yi − (1 − τ) * (yi / ȳ)^(1 − λ) * ȳ
function tax(yi, ybar, τ, λ)
    return yi - (1 - τ) * (yi / ybar)^(1 - λ) * ybar
end

# Example 1: Calculate tax for an individual with income yi,
# given an average income ybar, an average tax rate τ,
# and two different progressivity parameters λ.
yi = 1.5   # individual labor income and this is an example god how do i remember all of that at the same timeeeee 
ybar = 1.0 # average labor income this one we know from the equilibrium condition: ȳ = 1
τ = 0.3    # i guess we can guess freely here so let's assume an average tax rate of 30%

λ1 = 0.0   # no progressivity: proportional tax (T(yi) = τ*yi)
λ2 = 0.15  # progressive tax

tax1 = tax(yi, ybar, τ, λ1)
tax2 = tax(yi, ybar, τ, λ2)

println("For yi = $yi, ȳ = $ybar, and τ = $τ:")
println("Tax with λ = $λ1: ", tax1)
println("Tax with λ = $λ2: ", tax2)

# -----------------------------------------------------------------
# Now a simplified framework for solving the full model shuld be set up.
# In the model we will choose an asset grid and solve for the equilibrium (value function iteration can be used here). Here is the 
 a placeholder function..
#  'asset_grid_size' and 'curvature' must have chamged  parameters to ensure  robust results .

function solve_equilibrium(λ; asset_grid_size=100, curvature=2.0, tol=1e-6, maxiter=1000)
    #  non-linear asset grid.
    # power transformation for curvatureis ok
    a_min = 0.0
    a_max = 20.0
    linear_grid = range(0, 1, length=asset_grid_size)
    asset_grid = a_min .+ (a_max - a_min) .* (linear_grid .^ curvature)
    
    # (Here, you would incorporate the rest of your model:
    #   - discretize productivity,
    #   - set up households’ Bellman equations,
    #   - iterate to convergence,
    #   - and solve for the equilibrium distribution and aggregate variables.)
    #
    # For demonstration purposes, we return a dummy equilibrium result.
    equilibrium = Dict(
        "asset_grid" => asset_grid,
        "λ"          => λ,
        "dummy_output" => rand(),  # Replace with your computed aggregate output, etc.
        "average_assets" => mean(asset_grid)
    )
    return equilibrium
end

# Solve the model for both λ values.
eq1 = solve_equilibrium(λ1, asset_grid_size=150, curvature=2.5)
eq2 = solve_equilibrium(λ2, asset_grid_size=150, curvature=2.5)

println("\nEquilibrium Results:")
println("For λ = $λ1: ", eq1)
println("For λ = $λ2: ", eq2)

# (Optional) Plot the asset grids for visual comparison.
plot(eq1["asset_grid"], label="λ = $λ1", lw=2)
plot!(eq2["asset_grid"], label="λ = $λ2", lw=2)
xlabel!("Asset grid index")
ylabel!("Asset level")
title!("Asset Grid Comparison for Different Tax Progressivity")

